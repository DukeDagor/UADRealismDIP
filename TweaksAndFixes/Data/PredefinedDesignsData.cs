//#define LOGHULLSTATS
//#define LOGHULLSCALES
//#define LOGPARTSTATS
//#define LOGGUNSTATS

using System;
using System.Collections.Generic;
using MelonLoader;
using HarmonyLib;
using UnityEngine;
using Il2Cpp;
using Il2CppInterop.Runtime.Attributes;
using UnityEngine.UI;
using Il2CppTMPro;
using System.ComponentModel.Design;
using UnityEngine.Windows.Speech;
using MelonLoader.TinyJSON;

#pragma warning disable CS8600
#pragma warning disable CS8602
#pragma warning disable CS8603
#pragma warning disable CS8604
#pragma warning disable CS8618
#pragma warning disable CS8625

// TODO: Add popup to lng file, catch other game breaking errors, add to params

namespace TweaksAndFixes
{
    public class PredefinedDesignsData
    {
        public class PredefData
        {
            [Serializer.Field] public string name;
            [Serializer.Field] public string filename;
            [Serializer.Field] public float skipChance;
            [Serializer.Field] public int yearRange;
            public readonly Dictionary<string, List<int>> yearsPerPlayer = new Dictionary<string, List<int>>();
            public bool loadedData = false;
            public float _curSkipChance;
        }

        private static PredefinedDesignsData? _Instance = null;

        private static void Ensure()
        {
            if (_Instance == null)
            {
                _Instance = new PredefinedDesignsData();
            }
            if (!_Instance._loaded)
                _Instance.LoadData();
        }

        public static PredefinedDesignsData Instance
        {
            get
            {
                Ensure();
                return _Instance;
            }
        }

        private const string _StockAssetName = "<stock predefined designs>";
        private const string _StockAssetFilenameProxy = "--";
        private static GameObject? _BatchGenUI = null;

        private bool _loaded = false;
        private bool _noFile = true;
        private bool _lastLoadCared = false;
        public bool LastLoadWasRestrictive => _lastLoadCared;
        private readonly List<PredefData> _predefFileData = new List<PredefData>();
        private int _lastValidData = 0;
        private bool _needUseNewFindCode = false;
        public bool NeedUseNewFindCode => _needUseNewFindCode;
        private static bool PredefinedDesignFileProblem = false;
        public static bool NeedLoadRestrictive(bool prewarm)
            => CampaignController.Instance.designsUsage == CampaignController.DesignsUsage.FullPredefined ||
                            (prewarm && CampaignController.Instance.designsUsage != CampaignController.DesignsUsage.FullGenerated);

        private void LoadData()
        {
            _loaded = false;
            _predefFileData.Clear();
            Patch_GameManager.CurrentSubGameState = Patch_GameManager.SubGameState.LoadingPredefinedDesigns;

            string text;
            if (Config._PredefinedDesignsDataFile.Exists)
            {
                _noFile = false;
                text = File.ReadAllText(Config._PredefinedDesignsDataFile.path);
            }
            else if (Config._PredefinedDesignsFile.Exists)
            {
                _noFile = false;
                text = $"@name,filename,skipChance,yearRange\n{Config._PredefinedDesignsFile.name.Replace(".bin", "")},{Config._PredefinedDesignsFile.name},0,-1";
            }
            else
            {
                _noFile = true;
                text = $"@{nameof(PredefData.name)},{nameof(PredefData.filename)},{nameof(PredefData.skipChance)},{nameof(PredefData.yearRange)}\nAutogenerated,{Config._PredefinedDesignsFile},0,-1";
            }

            // If a file is specified, even if it uses stock assets, it may use
            // a yearRange. So we can't trust it. And if we're not clobbering
            // tech, then we need to use the new logic.
            _needUseNewFindCode = !_noFile || Config.DontClobberTechForPredefs;

            Melon<TweaksAndFixes>.Logger.Msg("Loading predefined design database");
            Serializer.CSV.Read<List<PredefData>, PredefData>(text, _predefFileData);
            Patch_GameManager.CurrentSubGameState = Patch_GameManager.SubGameState.Other;
            _loaded = true;
        }

        public bool LoadPredefSets(bool prewarm)
        {
            if (PredefinedDesignFileProblem) return false;

            int totalCount = 0;
            _lastValidData = 0;
            _lastLoadCared = false; // if we fail, remember this load as less restrictive
            int iC = _predefFileData.Count;
            bool isLast = true;
            bool loadedNonStock = false;
            bool careAboutPredefs = NeedLoadRestrictive(prewarm);

            for (int i = iC; i-- > 0;)
            {
                var data = _predefFileData[i];
                data.yearsPerPlayer.Clear();
                data.loadedData = false;

                string? path;
                string errorFilename;
                if (data.filename == _StockAssetFilenameProxy)
                {
                    path = null;
                    errorFilename = _StockAssetName;
                }
                else
                {
                    errorFilename = data.filename;
                    path = Path.Combine(Config._BasePath, data.filename);
                    if (!File.Exists(path))
                    {
                        if (_noFile)
                        {
                            path = null;
                            errorFilename = _StockAssetName;
                        }
                        else
                        {
                            Melon<TweaksAndFixes>.Logger.Error($"Failed to find predefined designs file {errorFilename} referenced in {Config._PredefinedDesignsDataFile}");
                            if (careAboutPredefs)
                                return false;
                            else
                                continue;
                        }
                    }
                }

                bool careAboutThisPredef = isLast && careAboutPredefs && Config.Param("taf_predef_ignore_missing", 0) == 0;
                if (!LoadPredefs(path, out var store, out int dCount, careAboutThisPredef))
                {
                    Melon<TweaksAndFixes>.Logger.Error($"Tried to load predefined designs file {errorFilename} but failed to load it correctly.");
                    if (careAboutThisPredef)
                        return false;
                    else
                        continue;
                }

                if (path != null)
                    loadedNonStock = true;

                if (isLast)
                {
                    isLast = false;
                    _lastValidData = i;
                    data._curSkipChance = 0;
                    CampaignController.Instance._currentDesigns = CampaignDesigns.FromStore(store);
                    if (_needUseNewFindCode)
                    {
                        foreach (var spy in store.shipsPerYear)
                        {
                            foreach (var spp in spy.Value.shipsPerPlayer)
                            {
                                data.yearsPerPlayer.ValueOrNew(spp.Key).Add(spy.Key);
                            }
                        }
                    }
                }
                else
                {
                    data._curSkipChance = data.skipChance;
                    foreach (var spy in store.shipsPerYear)
                    {
                        foreach (var spp in spy.Value.shipsPerPlayer)
                        {
                            data.yearsPerPlayer.ValueOrNew(spp.Key).Add(spy.Key);

                            string pName = $"{i}_{spp.Key}";
                            foreach (var spt in spp.Value.shipsPerType)
                            {
                                foreach (var ship in spt.Value)
                                {
                                    var oldName = ship.playerName;
                                    ship.playerName = pName;
                                    CampaignController.Instance._currentDesigns.AddShip(ship);
                                    ship.playerName = oldName;
                                }
                            }
                        }
                    }
                }
                foreach (var kvp in data.yearsPerPlayer)
                    kvp.Value.Sort();

                totalCount += dCount;
                data.loadedData = true;
                Melon<TweaksAndFixes>.Logger.Msg($"Loaded {dCount} designs from {errorFilename}");
            }
            if (loadedNonStock)
                Melon<TweaksAndFixes>.Logger.Msg($"Overrode predefined designs by loading {totalCount} ships.");
            _lastLoadCared = prewarm;
            return true;
        }

        public static bool LoadPredefs(string? path, out CampaignDesigns.Store? store, out int dCount, bool checkMissing)
        {
            dCount = 0;
            if (path == null)
            {
                path = _StockAssetName; // for logging
                var textAsset = Resources.Load<TextAsset>("packedShips");
                store = Util.DeserializeObjectByte<CampaignDesigns.Store>(textAsset.bytes);
            }
            else
            {
                var bytes = File.ReadAllBytes(path);
                store = Util.DeserializeObjectByte<CampaignDesigns.Store>(bytes);
                if (store == null)
                    return false;
            }

            if (store.shipsPerYear == null)
            {
                Melon<TweaksAndFixes>.Logger.Error("Failed to load shipsPerYear from " + path);
                return false;
            }

            if (Config.Param("taf_predef_debug_enable", 0) == 1) // Check for predef problems
            {
                int min = Config.Param("taf_predef_debug_min_ship_count", 5);
                int max = Config.Param("taf_predef_debug_max_ship_count", 15);
                bool asCSV = Config.Param("taf_predef_debug_format", 0) == 1;
                bool printAll = Config.Param("taf_predef_debug_print_all", 0) == 1;
                List<string> types = new List<string> { "tb", "dd", "cl", "ca", "bc", "bb" }; // TODO: Pull from shiptypes.csv instead!

                string ShipsPerYearProblems = "";

                // foreach (var spy in store.shipsPerYear)
                // {
                //     Melon<TweaksAndFixes>.Logger.Error($"{spy.Key}");
                //     foreach (var spp2 in spy.Value.shipsPerPlayer)
                //     {
                //         Melon<TweaksAndFixes>.Logger.Error($"  {spp2.Key}");
                //         foreach (var spp3 in spp2.value.shipsPerType)
                //         {
                //             Melon<TweaksAndFixes>.Logger.Error($"    {spp3.Key}: {spp3.Value.Count}");
                //         }
                //     }
                // }
                // 
                // 
                // if (false)
                foreach (var spy in store.shipsPerYear)
                {
                    bool yearProblem = false;
                    foreach (var p in G.GameData.playersMajor.Values)
                    {
                        bool missing = true;
                        foreach (var spp2 in spy.Value.shipsPerPlayer)
                        {
                            if (spp2.Key == p.name && spp2.Value.shipsPerType.Count > 0)
                            {
                                missing = false;
                                break;
                            }
                        }
                        if (missing)
                        {
                            if (!yearProblem)
                            {
                                yearProblem = true;
                                ShipsPerYearProblems += asCSV ? $"\n,,,,,,,\n{spy.Key},tb,dd,cl,ca,bc,bb" : $"\n - {spy.Key}";
                            }
                            ShipsPerYearProblems += asCSV ? $"\n{p.name},0,0,0,0,0,0" : $"\n   = {p.name}: No Designs"; // \n  + tb: 0\n  + dd: 0\n  + cl: 0\n  + ca: 0\n  + bc: 0\n  + bb: 0
                            continue;
                        }
                    }


                    foreach (var spp2 in spy.Value.shipsPerPlayer)
                    {
                        string msg = asCSV ? $"\n{spp2.key}" : $"\n   = {spp2.key}:";
                        bool countryProblem = false;
                        string typeCount = "";
                        int typeIndex = 0;
                        var sppp1 = spp2.value.shipsPerType;

                        Dictionary<string, Il2CppSystem.Collections.Generic.List<Ship.Store>> parsedList = new Dictionary<string, Il2CppSystem.Collections.Generic.List<Ship.Store>>();
                        foreach (var spp3 in spp2.value.shipsPerType)
                        {
                            parsedList[spp3.Key] = spp3.Value;
                        }

                        for (int i = 0; i < types.Count; i++)
                        {
                            if (!parsedList.ContainsKey(types[i]))
                            {
                                typeCount += ",0";
                                if (!asCSV) msg += $"\n     + {types[i]}: 0";
                                countryProblem = true;
                                if (!yearProblem)
                                {
                                    yearProblem = true;
                                    ShipsPerYearProblems += asCSV ? $"\n,,,,,,,\n{spy.Key},tb,dd,cl,ca,bc,bb" : $"\n - {spy.Key}";
                                }
                                continue;
                            }

                            var shipList = parsedList[types[i]];

                            typeIndex += 2;
                            bool isTBorDD = i < 2;
                            if (shipList.Count < (isTBorDD ? min * 2 : min) || shipList.Count > (isTBorDD ? max * 2 : max) || printAll)
                            {
                                msg += asCSV ? "" : $"\n     + {types[i]}: {shipList.Count}";
                                typeCount += $",{shipList.Count}";

                                countryProblem = true;
                                if (!yearProblem)
                                {
                                    yearProblem = true;
                                    ShipsPerYearProblems += asCSV ? $"\n,,,,,,,\n{spy.Key},tb,dd,cl,ca,bc,bb" : $"\n - {spy.Key}";
                                }
                            }
                            else
                            {
                                typeCount += ",";
                            }
                        }
                        if (countryProblem) 
                        {
                            ShipsPerYearProblems += msg + (asCSV ? typeCount : "");
                        }
                    }
                }

                if (ShipsPerYearProblems.Length > 0)
                {
                    Melon<TweaksAndFixes>.Logger.Error($"Found problems with pregen design file. See Wiki for more info on pregen files:{ShipsPerYearProblems}");

                    G.ui.ShowMessage(LocalizeManager.Localize("$TAF_Ui_Predef_Error_MalformedPredefFile"),
                        new System.Action(() =>
                        {
                            GameManager.Quit();
                        })
                    );

                    PredefinedDesignFileProblem = true;

                    return false;
                }
            }

            bool failed = false;

            foreach (var spy in store.shipsPerYear)
            {
                if (spy.Value.shipsPerPlayer == null)
                {
                    Melon<TweaksAndFixes>.Logger.Error($"Failed to load shipsPerPlayer for {spy.Key} from {path}");
                    failed = true;
                    break;
                }

                foreach (var p in G.GameData.playersMajor.Values)
                {
                    if (checkMissing)
                    {
                        bool missing = true;
                        foreach (var spp2 in spy.Value.shipsPerPlayer)
                        {
                            if (spp2.Key == p.name)
                            {
                                missing = false;
                                break;
                            }
                        }
                        if (missing)
                        {
                            Melon<TweaksAndFixes>.Logger.Error($"Year {spy.Key} lacks nation {p.name} from {path}");
                            failed = true;
                            break;
                        }
                    }
                }

                if (failed)
                {
                    break;
                }

                foreach (var spp in spy.Value.shipsPerPlayer)
                {
                    if (spp.Value.shipsPerType == null)
                    {
                        Melon<TweaksAndFixes>.Logger.Error($"Failed to load shipsPerType for {spy.Key} and player {spp.Key} from {path}");
                        failed = true;
                        break;
                    }

                    foreach (var spt in spp.Value.shipsPerType)
                    {
                        if (spt.Value == null)
                        {
                            Melon<TweaksAndFixes>.Logger.Error($"Failed to load ship list for type {spt.Key} for {spy.Key} and player {spp.Key} from {path}");
                            failed = true;
                            break;
                        }

                        dCount += spt.Value.Count;
                    }

                    if (failed)
                    {
                        break;
                    }
                }

                if (failed)
                {
                    break;
                }
            }


            if (failed)
            {
                G.ui.ShowMessage(LocalizeManager.Localize("$TAF_Ui_Predef_Error_MalformedPredefFile"),
                    new System.Action(() =>
                    {
                        GameManager.Quit();
                    })
                );

                PredefinedDesignFileProblem = true;

                return false;
            }

            return !failed;
        }

        public Ship.Store GetRandomShip(Player player, ShipType type, int desiredYear)
        {
            string pName = player.data.name;

            int maxTechYear = desiredYear; //Config.DontClobberTechForPredefs ? CampaignControllerM.CachePlayerTechs(player, true) : desiredYear;
            if (maxTechYear < Config.StartingYear)
                maxTechYear = Config.StartingYear;

            for (int i = 0; i < _predefFileData.Count; ++i)
            {
                var data = _predefFileData[i];
                if (!data.loadedData || data.skipChance > UnityEngine.Random.value || !data.yearsPerPlayer.TryGetValue(pName, out var ypp))
                {
                    continue;
                }

                string sppName =  i == _lastValidData ? pName : $"{i}_{pName}";

                int tries = -10;
                for (int j = ypp.Count; j-- > 0;)
                {
                    int year = ypp[j];
                    if (year > maxTechYear)
                    {
                        continue;
                    }
                    if (data.yearRange >= 0 ? year < maxTechYear - data.yearRange : tries++ > 0)
                    {
                        if (tries >= 0) Melon<TweaksAndFixes>.Logger.Error($"Predefined designs: After 10 tries, failed to find design of type {type.name} for {player.Name(false)} in year {desiredYear}.");
                        break;
                    }

                    if (!CampaignController.Instance._currentDesigns.shipsPerYear.TryGetValue(year, out var spy) || !spy.shipsPerPlayer.TryGetValue(sppName, out var spp))
                    {
                        Melon<TweaksAndFixes>.Logger.Error($"Predefined designs: yearsPerPlayer claims year {year} exists but no spp for player {pName} exists here!");
                        if(spy != null)
                        {
                            string lstr = "Year " + year;
                            foreach (var spp2 in spy.shipsPerPlayer)
                            {
                                lstr += " " + spp2.Key;
                            }
                            Debug.Log(lstr);
                        }
                        Debug.Log("********** Full State of CD:");
                        foreach (var spy2 in CampaignController.Instance._currentDesigns.shipsPerYear)
                        {
                            string lstr = "Year " + spy2.Key;
                            foreach (var spp2 in spy2.Value.shipsPerPlayer)
                            {
                                lstr += " " + spp2.Key;
                            }
                            Debug.Log(lstr);
                        }
                        continue;
                    }

                    var ship = spp.RandomShipOfType(player, type);

                    // if (ship == null && spp.shipsPerType.ContainsKey(type.name) && spp.shipsPerType[type.name].Count > 0)
                    // {
                    //      var shipList = spp.shipsPerType[type.name];
                    //  
                    //      int index = UnityEngine.Random.RandomRange(0, shipList.Count - 1);
                    //  
                    //      ship = shipList[index];
                    // }

                    // if (spp.shipsPerType[type.name] != null)
                    // {
                    //     Melon<TweaksAndFixes>.Logger.Error($"{year}: Searching through {spp.shipsPerType[type.name].Count} designs of type {type.name} for {player.Name(false)}...");
                    // }

                    if (ship != null)
                    {
                        // if (Config.DontClobberTechForPredefs)
                        //     CampaignControllerM.CleanupSDCaches();
                        // Melon<TweaksAndFixes>.Logger.Error($"  Found {ship.hullName} in {desiredYear} from {year}.");
                        return ship;
                    }
                    // else
                    // {
                    //     Melon<TweaksAndFixes>.Logger.Error($"  Failed after {10 + tries} tries, trying again...");
                    // }
                }
            }
            // if (Config.DontClobberTechForPredefs)
            //     CampaignControllerM.CleanupSDCaches();

            return null;
        }

        public static void AddUIforBSG()
        {
            if (_BatchGenUI != null)
            {
                GameObject.DestroyImmediate(_BatchGenUI);
                _BatchGenUI = null;
            }

            _BatchGenUI = GameObject.Instantiate(G.ui.popupUi.FindDeepChild("FileConverter").gameObject);
            GameObject.Destroy(_BatchGenUI.GetComponent<SaveFilesConverter>());
            GameObject.Destroy(_BatchGenUI.GetComponent<CanvasRenderer>());
            GameObject.Destroy(_BatchGenUI.GetComponent<Image>());
            _BatchGenUI.transform.SetParent(null);
            var root = _BatchGenUI.transform.Find("Root").gameObject;
            root.transform.Find("JsonFiles").gameObject.SetActive(false);

            var years = root.transform.Find("BinFiles").gameObject;
            years.name = "YearsList";
            var yearsList = years.transform.Find("Viewport").Find("List").gameObject;
            yearsList.DestroyAllChilds();
            var listVLG = yearsList.GetOrAddComponent<VerticalLayoutGroup>();
            var fsmNew = GameObject.Instantiate(G.ui.gameObject.FindDeepChild("Fullscreen Mode"));
            var toggleTemplate = fsmNew.GetComponentInChildren<Toggle>();
            var label = fsmNew.transform.Find("Label");
            label.SetParent(toggleTemplate.gameObject);
            GameObject.Destroy(label.GetComponent<LayoutElement>());
            toggleTemplate.SetParent(yearsList);
            toggleTemplate.gameObject.AddComponent<HorizontalLayoutGroup>();
            var go = new GameObject("dummy");
            go.AddComponent<RectTransform>();
            go.transform.SetParent(toggleTemplate.transform);
            var bg = toggleTemplate.transform.Find("Background").gameObject;
            var le = bg.AddComponent<LayoutElement>();
            le.minWidth = 20f;
            toggleTemplate.SetActive(false);
            GameObject.DestroyImmediate(fsmNew);

            var buttons = root.transform.Find("Buttons");
            var start = buttons.transform.Find("Close").GetComponent<Button>();
            start.onClick.RemoveAllListeners();
            var yearsO = buttons.transform.Find("Convert").GetComponent<Button>();
            yearsO.onClick.RemoveAllListeners();
            var yearsC = buttons.transform.Find("Delete").GetComponent<Button>();
            yearsC.onClick.RemoveAllListeners();

            var upperRow = root.transform.Find("UpperButtons").gameObject;
            upperRow.DestroyAllChilds();
            var res = G.ui.gameObject.FindDeepChild("Resolution");
            var nationDropObj = GameObject.Instantiate(res, upperRow.transform);
            var typeDropObj = GameObject.Instantiate(res, upperRow.transform);
            var bugT = G.ui.popupUi.FindDeepChild("BugReport").FindDeepChild("Title");
            var numInputObj = GameObject.Instantiate(bugT, upperRow.transform);

            var progressBox = root.transform.Find("CheckingSaves").gameObject;
            progressBox.SetParent(_BatchGenUI);
            var pcv = progressBox.AddComponent<Canvas>();
            var pcs = progressBox.AddComponent<CanvasScaler>();

            var rcv = root.AddComponent<Canvas>();
            var rcs = root.AddComponent<CanvasScaler>();

            var ucv = G.ui.GetComponent<Canvas>();
            var ucs = G.ui.GetComponent<CanvasScaler>();
            var ugr = G.ui.GetComponent<GraphicRaycaster>();

            pcv.renderMode = rcv.renderMode = ucv.renderMode;
            pcv.worldCamera = rcv.worldCamera = ucv.worldCamera;
            pcs.referenceResolution = rcs.referenceResolution = ucs.referenceResolution;
            pcs.screenMatchMode = rcs.screenMatchMode = ucs.screenMatchMode;
            pcs.uiScaleMode = rcs.uiScaleMode = ucs.uiScaleMode;
            var pgr = progressBox.AddComponent<GraphicRaycaster>();
            var rgr = root.AddComponent<GraphicRaycaster>();



            progressBox.SetActive(false);
            root.SetActive(false);

            _BatchGenUI.SetActive(true);

            //Melon<TweaksAndFixes>.Logger.Msg("Created batcher UI");

            var bsg = _BatchGenUI.AddComponent<BatchShipGenerator>();
            bsg.yearsButton = yearsO;
            bsg.yearsPanel = years;
            bsg.yearToggleParent = yearsList.transform;
            bsg.yearTemplate = toggleTemplate;
            bsg.closeYearsPanel = yearsC;
            bsg.startButton = start;
            bsg.shipsAmount = numInputObj.GetComponentInChildren<TMP_InputField>();
            bsg.shipTypeDropdown = typeDropObj.GetComponentInChildren<TMP_Dropdown>();
            bsg.nationDropdown = nationDropObj.GetComponentInChildren<TMP_Dropdown>();
            bsg.InitRoot = root;
            bsg.UIRoot = progressBox;
            bsg.progress = progressBox.GetComponentInChildren<TextMeshProUGUI>();
            //Melon<TweaksAndFixes>.Logger.Msg("Setup BSG");
            MelonCoroutines.Start(FixBSGText(numInputObj, typeDropObj, nationDropObj));
        }

        internal static System.Collections.IEnumerator FixBSGText(GameObject numInputObj, GameObject typeDropObj, GameObject nationDropObj)
        {
            // TODO: We could just keep the LocalizeText component?
            yield return new WaitForEndOfFrame();
            var bsg = _BatchGenUI.GetComponent<BatchShipGenerator>();
            var root = bsg.InitRoot;

            var locs = bsg.gameObject.GetComponentsInChildren<LocalizeText>(true);
            for (int i = locs.Length; i-- > 0;)
                GameObject.Destroy(locs[i]);
            yield return new WaitForEndOfFrame();

            root.transform.Find("Header").GetComponent<TextMeshProUGUI>().text = LocalizeManager.Localize("$TAF_Ui_BatchShipGenerator_Title");
            root.transform.Find("Note").GetComponent<TextMeshProUGUI>().text = LocalizeManager.Localize("$TAF_Ui_BatchShipGenerator_Note");
            bsg.startButton.GetComponentInChildren<TextMeshProUGUI>().text = LocalizeManager.Localize("$TAF_Ui_BatchShipGenerator_Generate");
            bsg.yearsButton.GetComponentInChildren<TextMeshProUGUI>().text = LocalizeManager.Localize("$TAF_Ui_BatchShipGenerator_ShowYears");
            bsg.closeYearsPanel.GetComponentInChildren<TextMeshProUGUI>().text = LocalizeManager.Localize("$TAF_Ui_BatchShipGenerator_HideYears");
            nationDropObj.transform.Find("Label").GetComponent<TextMeshProUGUI>().text = LocalizeManager.Localize("$TAF_Ui_BatchShipGenerator_Nations");
            typeDropObj.transform.Find("Label").GetComponent<TextMeshProUGUI>().text = LocalizeManager.Localize("$TAF_Ui_BatchShipGenerator_Types");
            numInputObj.FindDeepChild("Placeholder").GetComponent<TextMeshProUGUI>().text = LocalizeManager.Localize("$TAF_Ui_BatchShipGenerator_NumShips");
        }
    }

    // ShipsPerPlayer.RandomShipOfType
    // 
    // [HarmonyPatch(typeof(ShipsPerPlayer))]
    // internal class ShipsPerPlayer_RandomShipOfType
    // {
    //     [HarmonyPatch(nameof(ShipsPerPlayer.RandomShipOfType))]
    //     [HarmonyPrefix]
    //     internal static bool Postfix_RandomShipOfType(ShipsPerPlayer __instance, ref Ship.Store __result, Player player, ShipType shipType)
    //     {
    //         Melon<TweaksAndFixes>.Logger.Error($"{player.Name(false)} has {__instance.validDesigns.Count} valid designs.");
    // 
    //         var shipList = __instance.shipsPerType[shipType.name];
    // 
    //         if (shipList.Count == 0) return false;
    // 
    //         int index = UnityEngine.Random.RandomRange(0, shipList.Count - 1);
    // 
    //         __result = shipList[index];
    // 
    //         return false;
    //     }
    // }
}