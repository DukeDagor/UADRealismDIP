name: "Attach Release Artifacts"

# Controls when the action will run.
on:
  release:
    types: [published]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  attach-release-artifacts:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Get Branch
        shell: bash
        run: |
          releaseBranch=$(git branch -a --contains ${GITHUB_SHA} | head -n 2 | tail -n 1 | sed -e "s/\s*//" | sed -e "s/remotes\/origin\///")
          echo "Found branch ${releaseBranch}"
          echo "tagged_branch=${releaseBranch}" >> $GITHUB_ENV

      - name: Copy files
        run: |
          mkdir /tmp/Mods/
          cp -v ${GITHUB_WORKSPACE}/TweaksAndFixes/bin/Release/net6.0/TweaksAndFixes.dll /tmp/Mods/TweaksAndFixes.dll
          cp -v -R ${GITHUB_WORKSPACE}/TweaksAndFixes/Assets/* /tmp/Mods
          
      - name: Assemble release
        id: assemble-release
        run: |
          RELEASE_DIR="${RUNNER_TEMP}/release"
          echo "Release dir: ${RELEASE_DIR}"
          mkdir -v "${RELEASE_DIR}"
          echo "::set-output name=release-dir::${RELEASE_DIR}"
          cp -v -R "/tmp/Mods" "${RELEASE_DIR}"
          cp -v "${GITHUB_WORKSPACE}/README.md" "${RELEASE_DIR}"
          UADVERSION="$(grep -E Supported.UAD.Version\:.+[0-9]\.[0-9]+\.[0-9]+\..* README.md | sed -e s/.*Version\:./TweaksAndFixes_nightly_UAD/g)"
          echo "UAD Version: $(UADVERSION)"
          ARCHIVENAME=TweaksAndFixes_${{ github.event.release.tag_name }}_for_$(UADVERSION).zip
          echo "::set-output name=artifact-name::${ARCHIVENAME}"
          cd $(RELEASE_DIR)
          zip -r $(ARCHIVENAME) *

      - name: Upload package to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ steps.assemble-release.outputs.release-dir }}/${{ steps.assemble-release.outputs.artifact-name }}
          asset_name: ${{ steps.assemble-release.outputs.artifact-name }}
          asset_content_type: application/zip
